{"version":3,"sources":["components/AddCourse/AddCourse.js","components/CoursesList/CoursesList.js","App.js","serviceWorker.js","index.js"],"names":["AddCourse","props","react_default","a","createElement","onSubmit","addCourse","className","type","value","current","placeholder","onChange","updateCourse","err","CoursesList","state","isEdit","renderCourses","_this","details","name","id","onClick","toggleState","deleteCourse","index","e","preventDefault","editCourse","input","renderForm","ref","val","defaultValue","required","setState","this","react","Component","App","courses","target","length","push","splice","inputHandler","event","text","_this2","coursesList","map","course","components_CoursesList_CoursesList","key","components_AddCourse_AddCourse","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.e0a1227f.chunk.js","sourcesContent":["import React from 'react'\r\n\r\n\r\nconst AddCourse = (props) => {\r\n    return (\r\n        <form onSubmit={props.addCourse} className=\"addCourseForm\">\r\n            <input type=\"text\" value={props.current} placeholder=\"Add Team...\" onChange={props.updateCourse} />\r\n            <input type=\"submit\" value=\"Add Team\" />\r\n            <p className=\"ErrorMsg\">{props.err}</p>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default AddCourse","import React, { Fragment, Component } from \"react\";\r\n\r\nclass CoursesList extends Component {\r\n  state = {\r\n    isEdit: false,\r\n  };\r\n\r\n  renderCourses = () => {\r\n    return (\r\n      <li className=\"listItems\">\r\n        <span>{this.props.details.name}</span>\r\n        <div className=\"Actions\">\r\n          <button id=\"edit\" onClick={() => this.toggleState()}>\r\n            Edit\r\n          </button>\r\n          <button id=\"delete\" onClick={() => this.props.deleteCourse(this.props.index)}>\r\n            Delete\r\n          </button>\r\n        </div>\r\n      </li>\r\n    );\r\n  };\r\n\r\n  updateCourse = e => {\r\n    e.preventDefault();\r\n    this.props.editCourse(this.props.index, this.input.value);\r\n    this.toggleState();\r\n  };\r\n\r\n  renderForm = () => {\r\n    return (\r\n      <form className=\"UpdateForm\" onSubmit={this.updateCourse}>\r\n        <input className=\"updateInput\" type=\"text\" ref={val => (this.input = val)} defaultValue={this.props.details.name} required />\r\n        <button className=\"updateBtn\" type=\"submit\">\r\n          Update\r\n        </button>\r\n      </form>\r\n    );\r\n  };\r\n\r\n  toggleState = () => {\r\n    let { isEdit } = this.state;\r\n    this.setState({\r\n      isEdit: !isEdit,\r\n    });\r\n  };\r\n\r\n  render() {\r\n    let { isEdit } = this.state;\r\n    return <Fragment>{isEdit ? this.renderForm() : this.renderCourses()}</Fragment>;\r\n  }\r\n}\r\n\r\nexport default CoursesList;\r\n","import React, { Component } from \"react\";\nimport AddCourse from \"./components/AddCourse/AddCourse\";\nimport CoursesList from \"./components/CoursesList/CoursesList\";\n\nclass App extends Component {\n  state = {\n    courses: [\n      { name: \"HTML\" },\n      { name: \"JavaScript\" },\n      { name: \"Python\" }\n    ],\n    current: \"\",\n    err: \"\",\n  };\n\n  updateCourse = (e) => {\n    this.setState({\n      current: e.target.value,\n    });\n  };\n\n  addCourse = (e) => {\n    e.preventDefault();\n    let current = this.state.current;\n    let courses = this.state.courses;\n    let length = current.length;\n    if (length) {\n      courses.push({ name: current });\n      this.setState({\n        courses,\n        current: \"\",\n        err: \"\",\n      });\n    } else {\n      this.setState({\n        err: \"Enter Course Name\",\n      });\n    }\n  };\n\n  deleteCourse = (index) => {\n    let courses = this.state.courses;\n    courses.splice(index, 1);\n    this.setState({\n      courses,\n    });\n  };\n\n  editCourse = (index, value) => {\n    let courses = this.state.courses;\n    let course = courses[index];\n    course[\"name\"] = value;\n    this.setState({\n      courses,\n    });\n  };\n\n  inputHandler = (event) => {\n    this.setState({ text: event.target.value });\n  };\n\n  render() {\n    const { courses } = this.state;\n    const length = this.state.courses.length;\n    const coursesList = length ? (\n      courses.map((course, index) => {\n        return (\n          <CoursesList\n            details={course}\n            key={index}\n            index={index}\n            courses={this.state.courses}\n            deleteCourse={this.deleteCourse}\n            editCourse={this.editCourse}\n          />\n        );\n      })\n    ) : (\n      <p className=\"emptyMsg\">There are no Courses here!</p>\n    );\n    return (\n      <div className=\"App\">\n        <p className=\"title\">\n          All Courses{\" \"}\n          <span className=\"teamNumber\">({this.state.courses.length})</span>\n        </p>\n        <AddCourse\n          current={this.state.current}\n          updateCourse={this.updateCourse}\n          addCourse={this.addCourse}\n          err={this.state.err}\n        />\n        <ul className=\"list\"> {coursesList} </ul>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}